package kanban.manager;

import kanban.model.Epic;
import kanban.model.Subtask;
import kanban.model.Task;
import kanban.model.TaskStatus;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import java.util.List;
import static org.junit.jupiter.api.Assertions.*;

class InMemoryTaskManagerTest {
    private InMemoryTaskManager manager;
    private HistoryManager historyManager;

    @BeforeEach
    void beforeEach() {
        historyManager = new HistoryManager();
        manager = new InMemoryTaskManager(historyManager);
    }

    @Test
    void shouldCreateTaskWithAutoGeneratedIdWhenValidDataProvided() {
        manager.addTask("Task 1", "Description", TaskStatus.NEW);

        Task createdTask = manager.getTask(1);
        assertNotNull(createdTask, "Задача должна существовать после создания");
        assertEquals("Task 1", createdTask.getTitle());
        assertEquals(TaskStatus.NEW, createdTask.getStatus());
    }

    @Test
    void shouldGenerateUniqueIdsWhenCreatingMultipleTasks() {
        manager.addTask("Task 1", "Desc", TaskStatus.NEW);
        manager.addTask("Task 2", "Desc", TaskStatus.NEW);

        assertNotEquals(
                manager.getTask(1).getId(),
                manager.getTask(2).getId(),
                "ID задач должны быть уникальными"
        );
    }

    @Test
    void shouldReturnTaskByIdWhenTaskExists() {
        manager.addTask("Task 1", "Desc", TaskStatus.NEW);
        Task task = manager.getTask(1);

        assertNotNull(task, "Должна возвращаться созданная задача");
        assertEquals(1, task.getId());
    }

    @Test
    void shouldReturnNullWhenGettingNonExistentTask() {
        assertNull(manager.getTask(999), "Должен возвращаться null для несуществующей задачи");
    }

    @Test
    void shouldAddTaskToHistoryWhenTaskWatched() {
        manager.addTask("Task 1", "Desc", TaskStatus.NEW);
        manager.getTask(1);

        List<Task> history = historyManager.getHistory();
        assertEquals(1, history.size(), "Задача должна добавляться в историю при получении");
        assertEquals(1, history.get(0).getId());
    }

    @Test
    void shouldUpdateTaskFieldsWhenTaskExists() {
        manager.addTask("Original", "Desc", TaskStatus.NEW);
        Task updated = new Task("Updated", "New Desc", 1, TaskStatus.DONE);

        manager.updateTask(updated);
        Task result = manager.getTask(1);

        assertEquals("Updated", result.getTitle());
        assertEquals("New Desc", result.getDescription());
        assertEquals(TaskStatus.DONE, result.getStatus());
    }

    @Test
    void shouldRemoveTaskWhenTaskExists() {
        manager.addTask("To remove", "Desc", TaskStatus.NEW);
        manager.removeTask(1);

        assertNull(manager.getTask(1), "Задача должна удаляться");
        assertTrue(manager.getAllTasks().isEmpty());
    }

    @Test
    void shouldReturnAllTasksWhenTasksExist() {
        manager.addTask("Task 1", "Desc", TaskStatus.NEW);
        manager.addTask("Task 2", "Desc", TaskStatus.IN_PROGRESS);

        List<Task> allTasks = manager.getAllTasks();
        assertEquals(2, allTasks.size());
        assertTrue(allTasks.stream().anyMatch(t -> t.getId() == 1));
        assertTrue(allTasks.stream().anyMatch(t -> t.getId() == 2));
    }

    @Test
    void shouldReturnEmptyListWhenNoTasksExist() {
        assertTrue(manager.getAllTasks().isEmpty(),
                "Должен возвращаться пустой список при отсутствии задач");
    }

    @Test
    void shouldRemoveAllTasksWhenClearTasksCalled() {
        manager.addTask("Task 1", "Desc", TaskStatus.NEW);
        manager.addTask("Task 2", "Desc", TaskStatus.NEW);

        manager.deleteAllTasks();

        assertTrue(manager.getAllTasks().isEmpty());
        assertNull(manager.getTask(1));
        assertNull(manager.getTask(2));
    }

    @Test
    void shouldCreateEpicWithNewStatusWhenNoSubtasks() {
        manager.addEpic("Epic 1", "Description");
        Epic epic = manager.getEpic(1);

        assertNotNull(epic, "Эпик должен существовать после создания");
        assertEquals("Epic 1", epic.getTitle());
        assertEquals(TaskStatus.NEW, epic.getStatus());
        assertTrue(epic.getSubtaskIds().isEmpty(), "Список подзадач должен быть пустым");
    }

    @Test
    void shouldGenerateUniqueIdWhenCreatingEpic() {
        manager.addEpic("Epic 1", "Desc");
        manager.addEpic("Epic 2", "Desc");

        assertNotEquals(
                manager.getEpic(1).getId(),
                manager.getEpic(2).getId(),
                "ID эпиков должны быть уникальными"
        );
    }

    @Test
    void shouldReturnEpicByIdWhenEpicExists() {
        manager.addEpic("Epic", "Desc");
        Epic epic = manager.getEpic(1);

        assertNotNull(epic);
        assertEquals(1, epic.getId());
    }

    @Test
    void shouldAddEpicToHistoryWhenEpicWatched() {
        manager.addEpic("Epic", "Desc");
        manager.getEpic(1);

        List<Task> history = historyManager.getHistory();
        assertEquals(1, history.size());
        assertEquals(1, history.get(0).getId());
    }

    @Test
    void shouldUpdateEpicFieldsWhenEpicExists() {
        manager.addEpic("Original", "Desc");
        Epic updated = new Epic("Updated", "New Desc", 1);

        manager.updateEpic(updated);
        Epic result = manager.getEpic(1);

        assertEquals("Updated", result.getTitle());
        assertEquals("New Desc", result.getDescription());
    }

    @Test
    void shouldRemoveEpicWhenEpicExists() {
        manager.addEpic("To remove", "Desc");
        manager.removeEpic(1);

        assertNull(manager.getEpic(1));
    }

    @Test
    void shouldRemoveSubtasksWhenEpicDeleted() {
        manager.addEpic("Epic", "Desc");
        manager.addSubtask("Sub 1", "Desc", TaskStatus.NEW, 1);
        manager.addSubtask("Sub 2", "Desc", TaskStatus.NEW, 1);

        manager.removeEpic(1);

        assertNull(manager.getSubtask(2));
        assertNull(manager.getSubtask(3));
    }

    @Test
    void shouldSetEpicStatusToNewWhenNoSubtasks() {
        manager.addEpic("Epic", "Desc");
        assertEquals(TaskStatus.NEW, manager.getEpic(1).getStatus());
    }

    @Test
    void shouldSetEpicStatusToDoneWhenAllSubtasksDone() {
        manager.addEpic("Epic", "Desc");
        manager.addSubtask("Sub", "Desc", TaskStatus.NEW, 1);
        manager.updateSubtask(new Subtask("Sub", "Desc", 2, TaskStatus.DONE, 1));

        assertEquals(TaskStatus.DONE, manager.getEpic(1).getStatus());
    }

    @Test
    void shouldSetEpicStatusToInProgressWhenSubtasksMixed() {
        manager.addEpic("Epic", "Desc");
        manager.addSubtask("Sub 1", "Desc", TaskStatus.NEW, 1);
        manager.addSubtask("Sub 2", "Desc", TaskStatus.DONE, 1);

        assertEquals(TaskStatus.IN_PROGRESS, manager.getEpic(1).getStatus());
    }

    @Test
    void shouldUpdateEpicStatusWhenSubtaskStatusChanged() {
        manager.addEpic("Epic", "Desc");
        manager.addSubtask("Sub", "Desc", TaskStatus.NEW, 1);
        manager.updateSubtask(new Subtask("Sub", "Desc", 2, TaskStatus.IN_PROGRESS, 1));

        assertEquals(TaskStatus.IN_PROGRESS, manager.getEpic(1).getStatus());
    }

    @Test
    void shouldReturnAllEpicsWhenEpicsExist() {
        manager.addEpic("Epic 1", "Desc");
        manager.addEpic("Epic 2", "Desc");

        List<Epic> epics = manager.getAllEpics();
        assertEquals(2, epics.size());
        assertTrue(epics.stream().anyMatch(e -> e.getId() == 1));
        assertTrue(epics.stream().anyMatch(e -> e.getId() == 2));
    }

    @Test
    void shouldReturnEmptyListWhenNoEpicsExist() {
        assertTrue(manager.getAllEpics().isEmpty());
    }

    @Test
    void shouldRemoveAllEpicsAndSubtasksWhenClearEpicsCalled() {
        manager.addEpic("Epic 1", "Desc");
        manager.addSubtask("Sub 1", "Desc", TaskStatus.NEW, 1);
        manager.addEpic("Epic 2", "Desc");

        manager.deleteAllEpics();

        assertTrue(manager.getAllEpics().isEmpty());
        assertTrue(manager.getAllSubtasks().isEmpty());
    }

    @Test
    void shouldCreateSubtaskWithCorrectEpicLink() {
        manager.addEpic("Test Epic", "Description");
        manager.addSubtask("Subtask", "Desc", TaskStatus.NEW, 1);

        Subtask subtask = manager.getSubtask(2);

        assertEquals(1, subtask.getEpicId(), "Подзадача должна быть привязана к эпику");
        assertTrue(manager.getEpic(1).getSubtaskIds().contains(2),
                "Эпик должен содержать ID подзадачи");
    }

    @Test
    void shouldUpdateSubtaskAndMaintainEpicLink() {
        manager.addEpic("Test Epic", "Description");
        manager.addSubtask("Original", "Desc", TaskStatus.NEW, 1);
        Subtask updated = new Subtask("Updated", "New Desc", 2, TaskStatus.DONE, 1);

        manager.updateSubtask(updated);
        Subtask result = manager.getSubtask(2);

        assertEquals("Updated", result.getTitle());
        assertEquals(TaskStatus.DONE, result.getStatus());
        assertEquals(1, result.getEpicId());
    }

    @Test
    void shouldRemoveSubtaskFromEpicWhenDeleted() {
        manager.addEpic("Test Epic", "Description");
        manager.addSubtask("Original", "Desc", TaskStatus.NEW, 1);
        manager.addSubtask("To remove", "Desc", TaskStatus.NEW, 1);
        manager.removeSubtask(2);

        assertNull(manager.getSubtask(2));
        assertFalse(manager.getEpic(1).getSubtaskIds().contains(2));
    }
}